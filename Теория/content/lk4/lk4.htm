<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Content-Language" CONTENT="ru">
<link href="../../css/style.css" rel="stylesheet" type="text/css">
<title>Лекция №4</title>
<base target="_top">
</HEAD><BODY>
<div align="center">
  <p><strong>Тема № 4 &quot; Формы представления чисел  в ЭВМ&quot; </strong></p>
</div>
<strong> <p>Вопросы:</p> </strong>
<p>
- Машинные формы представления чисел в ЭВМ. <br>
- Диапазон представления чисел. Сравнительная оценка. <br>
- Сложение чисел с фиксированной и плавающей точкой.<br>

</p>
<table width=800>
<tr>
<td>
<strong> <p>Машинные формы представления чисел в ЭВМ</p> </strong>
<p>
Существуют два основных способа представления данных в ЭВМ: с фиксированной и плавающей запятой.	<br>
<b>Представление чисел в форме с фиксированной точкой.</b> Для сокращения длины разрядной сетки и упрощения обработки данных
положение запятой может быть зафиксировано схемотехнически. При этом в слове данных сохраняются только две структурных
компоненты: поле знака и поле цифр.</p>
<img src="../../images/lk4/1.jpg">
<p>
Определим диапазон представления чисел для этого формата.<br>
А<sub>max</sub>=(2<sup>k</sup>-1)+(1-2<sup>-l</sup>),   <br>
где k - число разрядов целой, а l – дробной части числа  (k+l=n).<br>
В зависимости от размеров целой и дробной частей возможно следующее:</p>
<img src="../../images/lk4/2.jpg">
<p>
Очевидно, что ограничение длины разрядной сетки приводит к ограничению диапазона хранимых чисел и потере точности их
представления. Поэтому на практике широко используется и другая форма представления чисел.<br>
Возможно четыре формата целых чисел: <br>
-	целое число; <br>
-	короткое целое число; <br>
-	длинное целое число; <br>
-	упакованное десятичное число. <br>
Целое число занимает два байта. Его формат полностью соответствует используемому центральным процессором. Для представления
отрицательных чисел используется дополнительный код. Короткое целое и длинное целое имеют аналогичные форматы, но занимают,
соответственно, 4 и 8 байтов. <br>
Упакованное десятичное число занимает 10 байтов. Это число содержит 18 десятичных цифр, расположенных по две в каждом байте.
Знак упакованного десятичного числа находится в старшем бите самого левого байта. Остальные биты старшего байта должны быть равны 0.
Существуют команды сопроцессора, которые преобразуют числа в формат упакованных десятичных чисел из внутреннего представления в 
расширенном вещественном формате. Если программа делает попытку преобразования в упакованный формат денормализованных чисел, нечисел,
бесконечности и т.п., в результате получается неопределенность. Неопределенность в упакованном формате представляет из себя число, в
котором два старших байта содержат единицы во всех разрядах. Содержимое остальных восьми байтов произвольно. При попытке использовать
такое упакованное число в операциях фиксируется ошибка. <br>
Приведем возможные варианты представления целых чисел: <br>
Нуль                                0... 0      <br>
Наименьшее положительное число      0... 1      <br>
Наибольшее отрицательное число      1... 1       <br>
Наибольшее положительное число      01... 1  <br>
Наименьшее отрицательное число      10...01     <br>
Неопределенность                    10...00     <br>
Представление чисел в форме с плавающей точкой. Прежде чем говорить о форматах вещественных чисел, используемых в ЭВМ, вспомним о числах
с плавающей точкой, встречающихся в научных расчетах. Общий вид этих чисел можно записать следующим образом: <br>
	A=&plusmn;m<sub>A</sub>r&plusmn;p<sub>A</sub>,<br>
где r – основание системы счисления, в которой записано число, m<sub>A</sub>- мантисса, а р<sub>A</sub>- порядок числа А. Порядок
(с учетом знака) показывает, на сколько разрядов и в какую сторону сдвинута запятая при замене формы записи числа с естественной
на нормальную.<br>
Например, А<sub>10</sub> = 239,745 = 0,239745*10<sup>3</sup> = 239745?10<sup>-3</sup>.<br>
 Наиболее распространено и удобно для представления ограничение вида   r-1&le;|m<sub>A</sub>|&#60;1.
Форма представления чисел, для которых справедливо данное ограничение, называется нормализованной. Так как абсолютное значение
мантиссы в этом случае лежит в диапазоне от r-1 до 1-r-n, где n – число разрядов мантиссы без знака, то положение разрядов числа
в его машинном изображении непостоянно. Отсюда и название этой формы представления чисел – с плавающей точкой. Однако реализация в
ЭВМ нормализованных чисел имеет некоторые особенности. Число с плавающей точкой называется нормализованным, если целая часть мантиссы
числа состоит из одной, не равной нулю, цифры. <br>
В чем преимущества использования нормализованных чисел? В том, что для фиксированной разрядной сетки числа (т.е. для фиксированного
количества цифр в числе) нормализованные числа имеют наибольшую точность. Кроме того, нормализованное представление исключает 
неоднозначность - каждое число с плавающей точкой может быть представлено различными (ненормализованными) способами: 
123.5678*10<sub>5</sub> = 12.35678*10<sub>6</sub> = 1.235678*10<sub>7</sub> = 0.1235678*10<sub>8</sub><br>
Формат машинного изображения чисел с плавающей точкой должен включать знаковые поля (мантиссы и порядка), поле мантиссы и поле<br>
порядка числа и имеет следующий вид:</p>
<img src="../../images/lk4/3.jpg">
<p>Для данного формата разрядной сетки можно записать следующий диапазон представления чисел:</p>
<img src="../../images/lk4/4.jpg">
<p>
В языках высокого уровня используется следующее представление чисел с плавающей точкой:<br> 
(знак)(мантисса)E(знак)(порядок)<br>
Например, -5.35E-2 означает число -5.35*10-2. Такое представление называется научной нотацией. <br>
В зависимости от типа данных числа с плавающей запятой в памяти ЭВМ хранятся в одном из следующих трех форматов: <br>
-	одинарной точности; <br>
-	двойной точности; <br>
-	расширенной точности. <br>
Эти числа занимают в памяти, соответственно, 4, 8 или 10 байтов. Для упрощения операций над порядками применяют представление
чисел с плавающей запятой со смещенным порядком: p'=p+N, где  N – целое положительное число (смещение), N= max(-p). Обычно N=2<sup>k</sup>,
где k- число двоичных разрядов в поле цифр несмещенного порядка. В этом случае поле знака порядка избыточно, так как p' всегда
положительно. Такие смещенные порядки называют характеристиками. Поле характеристики - это степень числа 2, на которую умножается
мантисса, плюс смещение, равное 127 для одинарной точности, 1023 - для двойной точности и 16383 - для расширенной точности. </p>
<img src="../../images/lk4/5.jpg">
<p>
В любом из форматов старший (знаковый) бит  определяет знак вещественного числа: <br>
-	0 - положительное число; <br>
-	1 - отрицательное число. <br>
Все равные по абсолютному значению положительные и отрицательные числа отличаются только этим битом. В остальном числа
с разным знаком полностью симметричны. Для представления отрицательных чисел здесь не используется дополнительный код,
как это сделано для чисел с фиксированной точкой. В поле мантиссы содержится мантисса нормализованного числа. Для двоичного
представления чисел, если целая часть мантиссы числа равна 1, то число с плавающей точкой называется нормализованным. 
Так как для нормализованного двоичного числа целая часть всегда равна единице, то эту единицу можно не хранить. В форматах одинарной
и двойной точности целая часть мантиссы не хранится. Таким образом, экономится один бит памяти. 
Формат представления чисел с расширенной точностью используется для выполнения всех операций. Более того, все операции с числами 
выполняются только в формате с расширенной точностью. В этом формате хранится и "лишний" бит целой части нормализованного числа.
Основная причина использования для вычислений расширенной точности - предохранение программы от возможной потери точности вычислений,
связанной с большими различиями в порядках чисел, участвующих в арифметических операциях. <br>
Для того, чтобы определить абсолютное значение числа с плавающей точкой, можно воспользоваться следующими формулами: <br>
-	одинарная точность: 1.(цифры мантиссы)*2(P-127) <br>
-	двойная точность: 1.(цифры мантиссы)*2(P-1023) <br>
-	расширенная точность: 1.(цифры мантиссы)*2(P-16383) <br>
Приведем конкретный пример машинного представления числа, например, -0,875 в формате с одинарной точностью, которое в двоичном
виде выглядит следующим образом: <br>
1  01111110  11000000000000000000000<br>
Для этого числа знаковый бит равен 1 (отрицательное число), расширенный порядок (характеристика) равен 126, мантисса - 11
(в двоичной системе счисления). Значение этого числа вычисляется: <br>
1.11 * 2<sup>(126-127)</sup> = -1.75 * 2<sup>-1</sup> = -0,875<br>
В стандарте IEEE крайние значения порядка (характеристики) зарезервированы и не используются для представления обычных чисел. <br>
Рассмотрим некоторые особые случаи представления вещественных чисел. <br>
-Нуль - это такое число, у которого порядок и мантисса равны нулю. Нуль может иметь положительный или отрицательный знаки,
которые игнорируются в операциях сравнения. Таким образом, имеется два нуля - положительный и отрицательный. <br>
-Наименьшее положительное число - это число, которое имеет нулевой знаковый бит, значение порядка, равное 1, и значение
мантиссы, равное нулю. В зависимости от представления наименьшее положительное число имеет следующие значения:<br>
1,17*10<sup>-38</sup> (одинарная точность), 2.23*10<sup>-308</sup> (двойная точность), 3.37*10<sup>-4932</sup> (расширенная точность).<br>
-Наибольшее отрицательное число - полностью совпадает с наименьшим положительным числом, но имеет бит знака, установленный в 1. <br>
-Наибольшее положительное число -это число, которое имеет нулевой знаковый бит, поле порядка, в котором все биты кроме самого младшего,
равны 1, и содержит единицы во всех разрядах мантиссы. В зависимости от представления наибольшее положительное число имеет следующие
значения: 3.37*10<sup>38</sup> (одинарная точность), 1.67*10<sup>308</sup> (двойная точность), 1.2*10<sup>4932</sup> (расширенная точность). <br>
-Наименьшее отрицательное число - полностью совпадает с наибольшим положительным числом, но имеет бит знака, установленный в 1. <br>
-Положительная и отрицательная бесконечность - это число содержит все единицы в поле порядка и все нули в поле мантиссы. В зависимости
от состояния знакового бита может быть положительная и отрицательная бесконечности. Бесконечность может получиться, например, как результат
деления конечного числа на нуль. <br>
-Нечисло - содержит все единицы в поле порядка и любое значение в поле мантиссы. Нечисло может возникнуть в результате выполнения неправильной
операции при замаскированных особых случаях (ошибкам при работе с сопроцессоре будет посвящен отдельный раздел этой главы). <br>
-Неопределенность - содержит в поле порядка все единицы, а в поле мантиссы - число 1000..0 (для одинарной и двойной точности) или 11000..0 
(для расширенной точности, так как в этом формате хранится старший бит мантиссы). <br>
Отмеченные особые случаи могут быть наглядно представлены следую-щим образом:</p>
<img src="../../images/lk4/6.jpg">
<p>
При выполнении  арифметических операций над числами с плавающей запятой может получаться результат, выходящий за пределы диапазона
представления чисел, при этом выход за правую границу диапазона принято называть переполнением порядка (получение очень большого
числа), а выход за левую границу – исчезновением порядка (потерей порядка) – получение очень малого числа, близкого к нулю.
<b>Сложение чисел с плавающей запятой</b><br>
При сложении чисел складываемые цифры (разряды)  должны иметь одинаковый вес. Это требование выполняется, если складываемые
числа имеют одинаковые порядки. Пусть имеются два числа с плавающей запятой:<br>
A=&plusmn;m<sub>A</sub>r<sup>&plusmn;p<sub>A</sub></sup>,<br>
B=&plusmn;m<sub>B</sub>r<sup>&plusmn;p<sub>B</sub></sup>.<br>
Алгоритм сложения чисел с произвольными знаками состоит в следующем.<br>
1. Производится сравнение порядков p<sub>A</sub> и p<sub>B</sub>. Для этого из порядка числа A вычитается порядок числа B. Разность p=p<sub>A</sub>-p<sub>B</sub> указывает,
на сколько разрядов требуется сдвинуть вправо мантиссу числа с меньшим порядком. Если p=p<sub>A</sub>-p<sub>B</sub>>0, то p<sub>A</sub>&gt;p<sub>B</sub> и для выравнивания
порядков необходимо сдвинуть вправо мантиссу MB. Если p=p<sub>A</sub>-p<sub>B</sub><0, то pB>pA и для выравнивания порядков необходимо сдвинуть вправо
мантиссу MA. Если p=p<sub>A</sub>-p<sub>B</sub>=0, то p<sub>A</sub>=p<sub>B</sub> и порядки слагаемых выравнивать не требуется.<br>
2. Выполняется сдвиг соответствующей мантиссы до тех пор, пока p&ne;0.<br>
3. Выполняется сложение мантисс MA и MB  по правилу сложения правильных дробей.<br>
4. Если при сложении мантисс произошло переполнение, то производится нормализация путем сдвига мантиссы суммы вместе со знаковым
разрядом вправо на один разряд с увеличением порядка на единицу. Если же происходит денормализация, то выполняется сдвиг мантиссы
результата на соответствующее количество разрядов в сторону, противоположную нарушению нормализации с соответствующим изменением
порядка суммы.</p>
<img src="../../images/lk4/7.jpg">
<p>
Так как [р<sub>А</sub>-р<sub>В</sub>]доп &gt; 0, то сдвигу подвергается мантисса  МВ.<br>
В рассматриваемом примере при каждом сдвиге мантиссы на один разряд из положительной разности порядков производим последовательное 
вычитание единицы до тех пор, пока в результате не будет получен ноль. При этом выполняется анализ разности порядков на каждом шаге.
Если она отлична от нуля, то производится очередной сдвиг соответствующей мантиссы. В случае если разность [р<sub>А</sub>-р<sub>В</sub>]доп&gt;0, необходимо
либо прибавлять единицу до нулевого результата, либо изменить знак разности на противоположный и, как и выше, выполнять вычитание единицы.</p>
<img src="../../images/lk4/8.jpg">
<p>Полученный результат нормализован. После выполнения операции округления получим  [М<sub>А+В</sub>]= 1,00011.</p>
</BODY>
</HTML>