<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Content-Language" CONTENT="ru">
<link href="../../css/style.css" rel="stylesheet" type="text/css">
<title>Лекция №22</title>
<base target="_top">
</HEAD><BODY>
<div align="center">
  <p><strong>Тема № 22 &quot; Методы декомпозиции при синтезе МПА&quot; </strong></p>
</div>
<strong> <p>Вопросы:</p> </strong>
<p>
-	Методы декомпозиции при синтезе микропрограммного автомата<br>
</p>

<strong> <p>Декомпозиция при синтезе микропрограммного автомата</p> </strong>
<p>
Задача декомпозиции – заключается в поиске таких эквивалентных преобразований автомата, которые при минимальном числе состояний имеют те же свойства, что и при заданном. То есть необходимо определить, как можно получить заданный автомат Z, соединив минимальное число более простых автоматов, может быть, за счет усложнения комбинационных схем. Но при этом поведение автомата характеризуется одинаковыми внешними проявлениями. Так как понятие композиции имеет разное значение, то задачу декомпозиции автоматов можно ставить по-разному.
Простейшим примером является рассмотрение автоматов в виде суммы, произведения или последовательного соединения. Но наибольший интерес представляют композиции более простые, чем исходный автомат, то есть те, у которых либо меньшее число состояний, либо меньшее число входных каналов. Поэтому задача декомпозиции решается неоднозначно.
<i>Тождественными автоматами</i> принято считать такие автоматы, которые одинаково ведут себя при различном числе состояний.<br>
Основная задача декомпозиции автоматов состоит в поиске эффективных процедур, позволяющих по заданному автомату находить композицию, моделирующую исходный автомат. Так, с практической точки зрения представляют значительный интерес замены сложной системы на более простые и экономически более выгодные системы, выполняющие те же функции, что и исходная функция.
<i>Композицией автоматов</i> называют операции, используемые для создания новых автоматов из других, исходных. Автоматы, полученные в результате таких операций, также называют <i>композицией</i> автоматов.<br>
Основная задача композиции – минимизация числа состояний автомата, то есть построение по произвольно заданному конечному автомату нового с наименьшим числом возможных состояний и обладающего теми же свойствами, что и исходный автомат.<br>
На практике задача синтеза автоматов может встретиться в следующей ситуации: заказчик придумал конкретный оператор, реализуемый некоторым автоматом, но его базовая подготовка не дает возможности описать и построить задуманный автомат. Тогда исполнитель при помощи заказчика описывает автомат, что дает возможность его синтезировать.
Проблемы синтеза автоматов аналогичны проблемам, возникающим в современной алгебре при рассмотрении представления некоторой общей системы в виде отдельных более простых систем того же вида. На практике большое значение имеют задачи, связанные с необходимостью получить информацию о свойствах и состояниях автомата на данный момент времени, не “вскрывая” его, а только сравнивая результаты входного и выходного алфавита. Эта проблема составляет основу поиска методов технической диагностики конечного автомата, т.е. поиска его неисправностей. Порой, только с помощью прочтения или расшифровки “черного ящика” удается узнать о причинах гибели транспортных средств в экстремальных ситуациях.
Проектируя автомат как техническое устройство, мы осуществляем процесс перехода от описания его свойств к синтезу логической схемы, соответствующей заданным свойствам. Причем в теории автоматов разработаны специальные алгоритмические методы и программы для автоматизации процесса синтеза логических схем.<br>
Такой способ синтеза логических схем называют <b>аппаратным</b>, так как его результатом является создание конкретной электронной аппаратуры.<br>
Существует также <b>программный</b> способ синтеза логических схем, по которому создается не сама логическая схема, а программа, ей соответствующая.<br>
Очевидно, конечный автомат является частным случаем алгоритма, в частности алгоритма с конечной памятью, что соответствует конечному числу состояний автомата.</p>

</BODY>
</HTML>